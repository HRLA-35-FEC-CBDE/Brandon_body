import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _mergeJSXProps from '@vue/babel-helper-vue-jsx-merge-props';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import size from '../../mixins/size.mjs';
import space from '../../mixins/space.mjs';
import IconCaretDown from '../icon/comps/caret-down.mjs';
import _Symbol from '@babel/runtime-corejs3/core-js-stable/symbol';
import _Object$assign from '@babel/runtime-corejs3/core-js-stable/object/assign';
import toArray from 'lodash-es/toArray';
import style from './styles/CdrSelect.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrSelect = {
  name: 'CdrSelect',
  components: {
    IconCaretDown: IconCaretDown
  },
  mixins: [size, space],
  inheritAttrs: false,
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    /**
     * `id` for the select that is mapped to the label `for` attribute. If one is not provided, it will be generated.
    */
    id: String,

    /**
     * Label text. This is required for a11y even if hiding the label with `hideLabel`.
    */
    label: {
      type: String,
      required: true
    },

    /**
     * Removes the label element but sets the select `aria-label` to `label` text for a11y.
    */
    hideLabel: Boolean,

    /**
     * Adds an option that is disabled and selected by default to serve as a `placeholder` for the select.
    */
    prompt: String,

    /**
     * Build options programatically with data. Array of objects [{ text: String, value: String}] to give greater control. Array of strings ['String'] for simpler setup (value and text will be the same).
    */
    options: {
      type: Array
    },

    /** @ignore */
    value: {
      type: [String, Number, Boolean, Object, Array, _Symbol, Function]
    },

    /** @ignore */
    disabled: Boolean,

    /** @ignore */
    required: Boolean,

    /** DEPRECATED */
    multiple: Boolean
  },
  data: function data() {
    return {
      style: style
    };
  },
  computed: {
    // Use given id or generate one
    selectId: function selectId() {
      return this.id ? this.id : this._uid; // eslint-disable-line no-underscore-dangle
    },
    baseClass: function baseClass() {
      return 'cdr-select';
    },
    selectClass: function selectClass() {
      var _ref;

      return _ref = {}, _defineProperty(_ref, this.style['cdr-select'], true), _defineProperty(_ref, this.style['cdr-select__prompt'], !this.value), _defineProperty(_ref, this.style['cdr-select--multiple'], this.multiple), _ref;
    },
    labelClass: function labelClass() {
      var _ref2;

      return _ref2 = {}, _defineProperty(_ref2, this.style['cdr-select__label'], true), _defineProperty(_ref2, this.style['cdr-select__label--disabled'], this.disabled), _ref2;
    },
    caretClass: function caretClass() {
      var _ref3;

      return _ref3 = {}, _defineProperty(_ref3, this.style['cdr-select__caret'], true), _defineProperty(_ref3, this.style['cdr-select__caret--disabled'], this.disabled), _ref3;
    },
    selectWrapClass: function selectWrapClass() {
      return _defineProperty({}, this.style['cdr-select-wrap'], true);
    },
    inputListeners: function inputListeners() {
      // https://vuejs.org/v2/guide/components-custom-events.html#Binding-Native-Events-to-Components
      // handles conflict between v-model and v-on="$listeners"
      var vm = this;
      return _Object$assign({}, this.$listeners, {
        change: function change(event) {
          if (vm.multiple) {
            var _context;

            var optArr = toArray(event.target.options);

            var selected = _mapInstanceProperty(_context = _filterInstanceProperty(optArr).call(optArr, function (o) {
              return o.selected === true;
            })).call(_context, function (o) {
              return o.value;
            });

            vm.$emit('change', selected, event);
          } else {
            vm.$emit('change', event.target.value, event);
          }
        }
      });
    },
    selectEl: function selectEl() {
      var _this = this,
          _context3;

      var h = this.$createElement;
      return h("select", _mergeJSXProps([{
        "on": _objectSpread({
          "change": function change($event) {
            var _context2;

            var $$selectedVal = _mapInstanceProperty(_context2 = _filterInstanceProperty(Array.prototype).call($event.target.options, function (o) {
              return o.selected;
            })).call(_context2, function (o) {
              return "_value" in o ? o._value : o.value;
            });

            _this.value = $event.target.multiple ? $$selectedVal : $$selectedVal[0];
          }
        }, this.inputListeners),
        "class": clsx(this.sizeClass, this.selectClass),
        "attrs": _objectSpread({
          "id": this.selectId,
          "multiple": this.multiple,
          "disabled": this.disabled,
          "required": this.required,
          "aria-label": this.hideLabel ? this.label : null
        }, this.$attrs),
        "ref": "select"
      }, {
        directives: [{
          name: "model",
          value: _this.value,
          modifiers: {}
        }]
      }]), [this.prompt && h("option", {
        "class": "cdr-select__prompt",
        "attrs": {
          "value": "",
          "disabled": true
        },
        "ref": "prompt"
      }, [this.prompt]), _mapInstanceProperty(_context3 = this.computedOpts).call(_context3, function (option) {
        return h("option", {
          "key": option.text,
          "domProps": {
            "value": option.value
          }
        }, [option.text]);
      }), this.$slots.default]);
    },
    labelEl: function labelEl() {
      var h = this.$createElement;
      var requiredEl = this.required ? h("span", {
        "class": this.style['cdr-select__required-label']
      }, ["Required"]) : '';
      return !this.hideLabel ? h("label", {
        "class": this.labelClass,
        "attrs": {
          "for": this.selectId
        },
        "ref": "label"
      }, [this.label, ' ', requiredEl]) : '';
    },
    infoEl: function infoEl() {
      var h = this.$createElement;
      return this.$slots.info ? h("span", {
        "class": this.style['cdr-select__info-container']
      }, [this.$slots.info]) : '';
    },
    helperEl: function helperEl() {
      var h = this.$createElement;
      return this.$slots['helper-text'] ? h("span", {
        "class": this.style['cdr-select__helper-text']
      }, [this.$slots['helper-text']]) : '';
    },
    computedOpts: function computedOpts() {
      var optsArr = [];

      if (this.options) {
        var _context4;

        _forEachInstanceProperty(_context4 = this.options).call(_context4, function (o) {
          var optObj = {};
          var text = '';
          var val = '';

          if (typeof o === 'string') {
            text = o;
            val = o;
          } else {
            var t = o.text,
                v = o.value;
            text = t;
            val = v;
          }

          optObj.text = text;
          optObj.value = val;
          optsArr.push(optObj);
        });
      }

      return optsArr;
    }
  },
  render: function render() {
    var h = arguments[0];
    return h("div", {
      "class": clsx(this.space)
    }, [this.labelEl, this.infoEl, h("div", {
      "class": this.selectWrapClass
    }, [this.selectEl, h("icon-caret-down", {
      "class": this.caretClass
    })]), this.helperEl]);
  }
};

export default CdrSelect;
