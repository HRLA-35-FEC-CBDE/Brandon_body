import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _mergeJSXProps from '@vue/babel-helper-vue-jsx-merge-props';
import size from '../../mixins/size.mjs';
import space from '../../mixins/space.mjs';
import modifier from '../../mixins/modifier.mjs';
import _Symbol from '@babel/runtime-corejs3/core-js-stable/symbol';
import style from './styles/CdrRadio.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrRadio = {
  name: 'CdrRadio',
  mixins: [modifier, space, size],
  inheritAttrs: false,
  props: {
    /**
     * Class that is added to the label for custom styles
     */
    labelClass: String,

    /**
     * Class that is added to the input for custom styles
     */
    inputClass: String,

    /**
     * Class that is added to the slot wrapper for custom styles
     */
    contentClass: String,

    /**
     * Sets the name of the radio. Required.
    */
    name: {
      type: String,
      required: true
    },

    /**
     * Sets the value of the radio. Required.
    */
    customValue: {
      type: [String, Number, Boolean, Object, Array, _Symbol, Function]
    },

    /** @ignore v-model binding */
    value: {
      type: [String, Number, Boolean, Object, Array, _Symbol, Function]
    }
  },
  data: function data() {
    return {
      newValue: this.value,
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-radio';
    }
  },
  watch: {
    value: function value(val) {
      this.newValue = val;
    },
    newValue: function newValue(val) {
      /**
       * `v-model` value. Fires on check/uncheck.
       * @event input
       * @type value | event
       * */
      this.$emit('input', val);
    }
  },
  methods: {
    updateValue: function updateValue(newValue, e) {
      /**
       * Selected radio value. Fires on section.
       * @event change
       * @type boolean|array
       */
      this.$emit('change', newValue, e);
    }
  },
  render: function render() {
    var _this = this;

    var h = arguments[0];
    return h("div", {
      "class": clsx(this.space, this.style['cdr-radio__wrap'])
    }, [h("label", {
      "class": clsx(this.style[this.baseClass], this.modifierClass, this.labelClass, this.sizeClass),
      "ref": "label"
    }, [h("input", _mergeJSXProps([{
      "on": {
        "change": [function ($event) {
          _this.newValue = _this.customValue;
        }, function (e) {
          return _this.updateValue(_this.newValue, e);
        }]
      },
      "class": clsx(this.style['cdr-radio__input'], this.inputClass),
      "attrs": _objectSpread({
        "type": "radio"
      }, this.$attrs, {
        "name": this.name
      }),
      "ref": "radio",
      "domProps": {
        "checked": this._q(_this.newValue, _this.customValue)
      }
    }, {
      directives: [{
        name: "model",
        value: _this.newValue,
        modifiers: {}
      }]
    }])), h("span", {
      "class": this.style['cdr-radio__figure']
    }), h("div", {
      "class": clsx(this.style['cdr-radio__content'], this.contentClass)
    }, [this.$slots.default])])]);
  }
};

export default CdrRadio;
