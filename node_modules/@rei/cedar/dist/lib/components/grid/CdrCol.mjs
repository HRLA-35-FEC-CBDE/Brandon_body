import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import propValidator from '../../utils/propValidator.mjs';
import modifier from '../../mixins/modifier.mjs';
import CdrRow from './CdrRow.mjs';
import style from './styles/CdrCol.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source), true)).call(_context5, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context6; _forEachInstanceProperty(_context6 = ownKeys(Object(source))).call(_context6, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrCol = {
  name: 'CdrCol',
  components: {
    CdrRow: CdrRow
  },
  mixins: [modifier],
  inject: {
    rowType: {
      default: 'normal'
    }
  },
  inheritAttrs: false,
  props: {
    /**
     * Number of columns (out of 12) the column should span. Functions like bootstrap col-* classes.
     * Overrides widths set by "cols" prop on CdrRow.
     * Possible values: {1-12}
     * Also accepts responsive values with `@breakpoint`: "12 8@lg"
     */
    span: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']);
      }
    },

    /**
     * Number of columns (out of 12) of empty space to add left of this column.
     * Possible values: {0-12}
     * Also accepts responsive values with `@breakpoint`: "12 8@lg"
     */
    offsetLeft: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']);
      }
    },

    /**
     * Number of columns (out of 12) of empty space to add right of this column.
     * Possible values: {0-12}
     * Also accepts responsive values with `@breakpoint`: "12 8@lg"
     */
    offsetRight: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']);
      }
    },

    /**
     * How the column should align (overrides CdrRow alignment). See CSS flexbox align-self.
     * Possible values: {top, middle, bottom, stretch}.
     * Also accepts responsive values with `@breakpoint`: "middle@sm"
     */
    alignSelf: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['top', 'middle', 'bottom', 'stretch']);
      }
    },

    /**
     * Makes the column act as a CdrRow. Setting this to true exposes all props of CdrRow in addition to cdr-col props.
     */
    isRow: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      style: style
    };
  },
  computed: {
    isList: function isList() {
      return this.rowType === 'list';
    },
    spanClass: function spanClass() {
      var _this = this;

      var classStr = [];

      if (this.span) {
        var _context;

        _forEachInstanceProperty(_context = this.span.split(' ')).call(_context, function (val) {
          classStr.push(_this.style["cdr-col_span".concat(val)]);
        });
      }

      return classStr.join(' ');
    },
    offsetLeftClass: function offsetLeftClass() {
      var _this2 = this;

      var classStr = [];

      if (this.offsetLeft) {
        var _context2;

        _forEachInstanceProperty(_context2 = this.offsetLeft.split(' ')).call(_context2, function (val) {
          classStr.push(_this2.modifyClassName('cdr-col', "offsetLeft".concat(val)));
        });
      }

      return classStr.join(' ');
    },
    offsetRightClass: function offsetRightClass() {
      var _this3 = this;

      var classStr = [];

      if (this.offsetRight) {
        var _context3;

        _forEachInstanceProperty(_context3 = this.offsetRight.split(' ')).call(_context3, function (val) {
          classStr.push(_this3.modifyClassName('cdr-col', "offsetRight".concat(val)));
        });
      }

      return classStr.join(' ');
    },
    alignSelfClass: function alignSelfClass() {
      var _this4 = this;

      var classStr = [];

      if (this.alignSelf) {
        var _context4;

        _forEachInstanceProperty(_context4 = this.alignSelf.split(' ')).call(_context4, function (val) {
          classStr.push(_this4.modifyClassName('cdr-col', val));
        });
      }

      return classStr.join(' ');
    }
  },
  render: function render() {
    var h = arguments[0];
    var colEl;

    if (!this.isRow && !this.isList) {
      colEl = h("div", {
        "class": clsx(this.style['cdr-col'], this.spanClass, this.offsetLeftClass, this.offsetRightClass, this.alignSelfClass)
      }, [h("div", {
        "class": this.style['cdr-col__content']
      }, [this.$slots.default])]);
    } else if (!this.isRow && this.isList) {
      colEl = h("li", {
        "class": clsx(this.style['cdr-col'], this.spanClass, this.offsetLeftClass, this.offsetRightClass, this.alignSelfClass)
      }, [h("div", {
        "class": this.style['cdr-col__content']
      }, [this.$slots.default])]);
    } else if (this.isRow && this.isList) {
      colEl = h("li", {
        "class": clsx(this.style['cdr-row'], this.style['cdr-col'], this.spanClass, this.offsetLeftClass, this.offsetRightClass, this.alignSelfClass)
      }, [h("cdr-row", {
        "class": this.style['cdr-col'],
        "attrs": _objectSpread({}, this.$attrs)
      }, [this.$slots.default])]);
    } else {
      colEl = h("cdr-row", {
        "class": clsx(this.style['cdr-col'], this.spanClass, this.offsetLeftClass, this.offsetRightClass, this.alignSelfClass),
        "attrs": _objectSpread({}, this.$attrs)
      }, [this.$slots.default]);
    }

    return colEl;
  }
};

export default CdrCol;
