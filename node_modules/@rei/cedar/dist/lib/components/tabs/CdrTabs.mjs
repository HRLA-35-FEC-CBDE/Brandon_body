import clsx from 'clsx';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import modifier from '../../mixins/modifier.mjs';
import debounce from 'lodash-es/debounce';
import _setTimeout from '@babel/runtime-corejs3/core-js-stable/set-timeout';
import _Array$from from '@babel/runtime-corejs3/core-js-stable/array/from';
import _findInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/find';
import delay from 'lodash-es/delay';
import style from './styles/CdrTabs.mjs';

var CdrTabs = {
  name: 'CdrTabs',
  mixins: [modifier],
  props: {
    height: {
      type: String,
      default: '240px'
    }
  },
  data: function data() {
    return {
      tabs: [],
      underlineOffsetX: 0,
      underlineWidth: 0,
      underlineScrollX: 0,
      activeTabIndex: 0,
      headerWidth: 0,
      headerOverflow: false,
      overflowLeft: false,
      overflowRight: false,
      animationInProgress: false,
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-tabs';
    },
    underlineStyle: function underlineStyle() {
      return {
        transform: "translateX(".concat(this.underlineOffsetX, "px)"),
        width: "".concat(this.underlineWidth, "px")
      };
    }
  },
  mounted: function mounted() {
    var _context,
        _context2,
        _this = this;

    this.tabs = _filterInstanceProperty(_context = _mapInstanceProperty(_context2 = this.$slots.default || []).call(_context2, function (vnode) {
      return vnode.componentInstance;
    })).call(_context, function (tab) {
      return tab;
    }); // get vue component children in the slot

    if (this.tabs[this.activeTabIndex] && this.tabs[this.activeTabIndex].setActive) {
      this.tabs[this.activeTabIndex].setActive(true);
    }

    this.$nextTick(function () {
      _this.headerWidth = _this.getHeaderWidth();

      _this.calculateOverflow();

      _setTimeout(function () {
        _this.updateUnderline();
      }, 100);
    }); // Check for header overflow on window resize for gradient behavior.

    window.addEventListener('resize', debounce(function () {
      _this.headerWidth = _this.getHeaderWidth();

      _this.calculateOverflow();

      _this.updateUnderline();
    }, 500)); // Check for header overflow on widow resize for gradient behavior.

    this.$refs.cdrTabsHeader.parentElement.addEventListener('scroll', debounce(function () {
      _this.calculateOverflow();

      _this.updateUnderline();
    }, 250));
  },
  methods: {
    handleClick: function handleClick(tabClicked) {
      var _context3,
          _context4,
          _this2 = this;

      var newSelectedTab = _findInstanceProperty(_context3 = this.tabs).call(_context3, function (tab) {
        return tabClicked.name === tab.name;
      });

      _forEachInstanceProperty(_context4 = this.tabs).call(_context4, function (tab, index) {
        if (newSelectedTab.name === tab.name) {
          if (_this2.activeTabIndex < index) {
            tab.setAnimationDirection('flyRight');

            _this2.tabs[_this2.activeTabIndex].setAnimationDirection('flyLeft');
          } else {
            tab.setAnimationDirection('flyLeft');

            _this2.tabs[_this2.activeTabIndex].setAnimationDirection('flyRight');
          }

          _this2.activeTabIndex = index;

          _this2.hideScrollBar();

          _this2.$nextTick(function () {
            return tab.setActive(true);
          });
        } else {
          _this2.$nextTick(function () {
            return tab.setActive(false);
          });
        }
      });

      this.updateUnderline();
    },
    calculateOverflow: function calculateOverflow() {
      var containerWidth = 0;

      if (this.$refs.cdrTabsContainer) {
        containerWidth = this.$refs.cdrTabsContainer.offsetWidth;
      }

      this.headerOverflow = this.headerWidth > containerWidth;

      if (this.headerOverflow) {
        // Get Scroll Position
        var scrollX = this.$refs.cdrTabsHeader.parentElement.scrollLeft;
        this.overflowLeft = scrollX > 1;
        this.overflowRight = scrollX + 1 < this.headerWidth - containerWidth;
      } else {
        this.overflowLeft = false;
        this.overflowRight = false;
      }
    },
    updateUnderline: function updateUnderline() {
      var elements = _Array$from(this.$refs.cdrTabsHeader.children);

      if (elements.length > 0) {
        var activeTab = elements[this.activeTabIndex];
        this.underlineOffsetX = activeTab.offsetLeft - this.$refs.cdrTabsHeader.parentElement.scrollLeft;
        this.underlineWidth = activeTab.firstChild.offsetWidth;
      }
    },
    rightArrowNav: function rightArrowNav() {
      if (!this.animationInProgress) {
        if (this.activeTabIndex < this.tabs.length - 1) {
          this.tabs[this.activeTabIndex].setAnimationDirection('flyLeft');
          this.tabs[this.activeTabIndex + 1].setAnimationDirection('flyRight');
          this.hideScrollBar();
          this.$nextTick(this.tabs[this.activeTabIndex].setActive(false));
          this.activeTabIndex += 1;
          this.$nextTick(this.tabs[this.activeTabIndex].setActive(true));
        }

        this.navAnimationProgress();
      }
    },
    leftArrowNav: function leftArrowNav() {
      if (!this.animationInProgress) {
        if (this.activeTabIndex > 0) {
          this.tabs[this.activeTabIndex].setAnimationDirection('flyRight');
          this.tabs[this.activeTabIndex - 1].setAnimationDirection('flyLeft');
          this.hideScrollBar();
          this.$nextTick(this.tabs[this.activeTabIndex].setActive(false));
          this.activeTabIndex -= 1;
          this.$nextTick(this.tabs[this.activeTabIndex].setActive(true));
        }

        this.navAnimationProgress();
      }
    },
    navAnimationProgress: function navAnimationProgress() {
      var _this3 = this;

      if (this.$refs.cdrTabsHeader.children[this.activeTabIndex]) {
        this.animationInProgress = true;
        delay(function () {
          _this3.animationInProgress = false;
        }, 600);
        this.updateUnderline();
        this.$refs.cdrTabsHeader.children[this.activeTabIndex].children[0].focus();
      }
    },
    handleDownArrowNav: function handleDownArrowNav() {
      if (!this.animationInProgress) {
        this.$el.lastElementChild.children[this.activeTabIndex].focus();
      }
    },
    setFocusToActiveTabHeader: function setFocusToActiveTabHeader() {
      this.$refs.cdrTabsHeader.children[this.activeTabIndex].children[0].focus();
    },
    getHeaderWidth: function getHeaderWidth() {
      var headerElements = [];

      if (this.$refs.cdrTabsHeader) {
        headerElements = _Array$from(this.$refs.cdrTabsHeader.children);
      }

      var totalWidth = 0;

      _forEachInstanceProperty(headerElements).call(headerElements, function (element) {
        totalWidth += element.offsetWidth || 0;
      });

      return totalWidth;
    },
    hideScrollBar: function hideScrollBar() {
      var styleRef = this.$refs.cdrTabsContainer.style;
      window.addEventListener('transitionend', function () {
        styleRef.setProperty('overflow-x', 'unset');
      }, {
        once: true
      });
      styleRef.setProperty('overflow-x', 'hidden');
    }
  },
  render: function render() {
    var _this4 = this,
        _context5;

    var h = arguments[0];
    return h("div", {
      "class": clsx(this.style[this.baseClass], this.modifierClass),
      "ref": "cdrTabsContainer",
      "style": {
        height: this.height
      }
    }, [h("div", {
      "class": clsx(this.overflowLeft ? this.style['cdr-tabs__header-gradient-left'] : '', this.overflowRight ? this.style['cdr-tabs__header-gradient-right'] : '', this.style['cdr-tabs__gradient-container']),
      "on": {
        "keyup": [function ($event) {
          if (!("button" in $event) && _this4._k($event.keyCode, "right", 39, $event.key, ["Right", "ArrowRight"])) return null;
          if ("button" in $event && $event.button !== 2) return null;
          return _this4.rightArrowNav($event);
        }, function ($event) {
          if (!("button" in $event) && _this4._k($event.keyCode, "left", 37, $event.key, ["Left", "ArrowLeft"])) return null;
          if ("button" in $event && $event.button !== 0) return null;
          return _this4.leftArrowNav($event);
        }],
        "keydown": function keydown($event) {
          if (!("button" in $event) && _this4._k($event.keyCode, "down", 40, $event.key, ["Down", "ArrowDown"])) return null;
          $event.preventDefault();
          return _this4.handleDownArrowNav($event);
        }
      }
    }, [h("nav", {
      "class": clsx(this.overflowLeft ? this.style['cdr-tabs__header-gradient-left'] : '', this.overflowRight ? this.style['cdr-tabs__header-gradient-right'] : '', this.style['cdr-tabs__header-container'])
    }, [h("ol", {
      "class": this.style['cdr-tabs__header'],
      "attrs": {
        "role": "tablist"
      },
      "ref": "cdrTabsHeader"
    }, [_mapInstanceProperty(_context5 = this.tabs).call(_context5, function (tab, index) {
      var _context6;

      return h("li", {
        "attrs": {
          "role": "tab",
          "aria-selected": tab.active
        },
        "key": tab.id ? tab.id : _concatInstanceProperty(_context6 = "".concat(tab.name, "-")).call(_context6, index),
        "class": clsx(tab.active ? _this4.style['cdr-tabs__header-item-active'] : '', _this4.style['cdr-tabs__header-item'])
      }, [h("a", {
        "attrs": {
          "href": "#".concat(tab.id || tab.name)
        },
        "class": _this4.style['cdr-tabs__header-item-label'],
        "on": {
          "click": function click($event) {
            $event.preventDefault();
            return function (e) {
              return _this4.handleClick(tab, e);
            }($event);
          }
        }
      }, [tab.name])]);
    })])]), h("div", {
      "class": this.style['cdr-tabs__underline'],
      "style": this.underlineStyle
    })]), h("div", {
      "class": this.style['cdr-tabs__content-container'],
      "ref": "slotWrapper"
    }, [this.$slots.default])]);
  }
};

export default CdrTabs;
