import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import size from '../../mixins/size.mjs';
import space from '../../mixins/space.mjs';
import modifier from '../../mixins/modifier.mjs';
import _indexOfInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import fullWidth from '../../mixins/fullWidth.mjs';
import style from './styles/CdrButton.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source), true)).call(_context3, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source))).call(_context4, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrButton = {
  name: 'CdrButton',
  mixins: [modifier, size, space, fullWidth],
  props: {
    /**
     * Controls render as button or anchor. {button, a}
     */
    tag: {
      type: String,
      default: 'button',
      validator: function validator(value) {
        var _context;

        return _indexOfInstanceProperty(_context = ['button', 'a']).call(_context, value) >= 0 || false;
      }
    },

    /**
     * Sets the button type. {button, submit, reset}
     */
    type: {
      type: String,
      default: 'button',
      validator: function validator(value) {
        var _context2;

        return _indexOfInstanceProperty(_context2 = ['button', 'submit', 'reset']).call(_context2, value) >= 0 || false;
      }
    },

    /**
     * Renders an icon-only button. Default slot is disabled. Overrides size and responsiveSize props.
     */
    iconOnly: {
      type: Boolean,
      default: false
    },

    /**
     * Renders an icon-only button with a light fill color for use on dark backgrounds.
     * iconOnly must be true.
     */
    onDark: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-button';
    },
    defaultClass: function defaultClass() {
      return this.modifyClassName(this.baseClass, 'primary');
    },
    buttonSizeClass: function buttonSizeClass() {
      return !this.iconOnly ? this.sizeClass : null;
    },
    iconClass: function iconClass() {
      var classes = [];

      if (this.$slots.icon && this.$slots.default) {
        /* only add class for buttons with text + icon */
        classes.push(this.modifyClassName(this.baseClass, 'has-icon'));
      }

      if (this.iconOnly) {
        classes.push(this.modifyClassName(this.baseClass, 'icon-only'));

        if (this.onDark) {
          classes.push(this.modifyClassName(this.baseClass, 'on-dark'));
        }
      }

      return classes.join(' ');
    }
  },
  render: function render() {
    var h = arguments[0];
    var Component = this.tag;
    return h(Component, {
      "class": clsx(this.defaultClass, this.style[this.baseClass], this.modifierClass, this.buttonSizeClass, this.fullWidthClass, this.iconClass, this.space),
      "attrs": {
        "type": this.tag === 'button' ? this.type : null
      },
      "on": _objectSpread({}, this.$listeners)
    }, [this.$slots.icon, this.$slots.default]);
  }
};

export default CdrButton;
