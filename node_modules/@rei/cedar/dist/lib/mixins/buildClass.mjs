import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';

/**
 * @mixin
 */
var BuildClass = {
  methods: {
    /**
     *
     * @param {String} prop -- the prop to build classes from
     */
    buildClass: function buildClass(prop) {
      var _this = this;

      var propNamePrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var checkBase = 'cdr';

      if (this.baseClass) {
        checkBase = this.baseClass;
      }

      var base = checkBase;
      var propArgsArr = this[prop] ? this[prop].split(' ') : [];
      var builtClasses = [];

      if (propNamePrefix) {
        /*
          prefix class names with prop name
        */
        propArgsArr = _mapInstanceProperty(propArgsArr).call(propArgsArr, function (mod) {
          var _context;

          return _concatInstanceProperty(_context = "".concat(prop)).call(_context, mod);
        });
      }

      if (!this.style) {
        builtClasses = _concatInstanceProperty(builtClasses).call(builtClasses, _mapInstanceProperty(propArgsArr).call(propArgsArr, function (mod) {
          return _this.modifyClassName(base, mod);
        }));
      } else {
        builtClasses = _concatInstanceProperty(builtClasses).call(builtClasses, _mapInstanceProperty(propArgsArr).call(propArgsArr, function (mod) {
          return _this.modifyClassName(base, mod);
        }));
      }

      return builtClasses.join(' ');
    },

    /**
     * Returns a css module class
     */
    moduleClass: function moduleClass(className) {
      return this.style["".concat(className)];
    },

    /**
     * Returns a modified base class
     */
    modifyClassName: function modifyClassName(base, modifier) {
      var _context2, _context3;

      return this.style ? this.moduleClass(_concatInstanceProperty(_context2 = "".concat(base, "--")).call(_context2, modifier)) : _concatInstanceProperty(_context3 = "".concat(base, "--")).call(_context3, modifier);
    }
  }
};

export default BuildClass;
