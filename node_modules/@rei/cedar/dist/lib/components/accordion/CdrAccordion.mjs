import clsx from 'clsx';
import IconCaretDown from '../icon/comps/caret-down.mjs';
import modifier from '../../mixins/modifier.mjs';
import style from './styles/CdrAccordion.mjs';

var CdrAccordion = {
  name: 'CdrAccordion',
  components: {
    IconCaretDown: IconCaretDown
  },
  mixins: [modifier],
  props: {
    /**
     * The unique id of an accordion.
     */
    id: {
      type: String,
      required: true
    },

    /**
     * The readable text on the accordion button.
     */
    label: {
      type: String,
      required: false
    },

    /**
     * Toggle this value to open/close the accordion.
     */
    opened: {
      type: Boolean,
      default: false
    },

    /**
     * Sets a compact style.
     */
    compact: {
      type: Boolean,
      default: false
    },

    /**
     * Sets a border-aligned style.
     */
    borderAligned: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      focused: false,
      maxHeight: this.opened ? 'none' : 0,
      // set maxHeight to none if initialized as open
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-accordion';
    },
    styleClass: function styleClass() {
      var styles = [];

      if (this.compact) {
        styles.push(this.modifyClassName(this.baseClass, 'compact'));
      }

      if (this.borderAligned) {
        styles.push(this.modifyClassName(this.baseClass, 'border-aligned'));
      }

      return styles.join(' ');
    },
    focusedClass: function focusedClass() {
      return this.focused ? this.modifyClassName(this.baseClass, 'focused') : null;
    },
    isOpenClass: function isOpenClass() {
      return this.opened ? 'open' : 'closed';
    }
  },
  watch: {
    opened: function opened() {
      this.maxHeight = this.opened ? "".concat(this.$refs['accordion-content'].clientHeight, "px") : 0;
    }
  },
  mounted: function mounted() {
    /*
      The intent here is to give maxHeight an actual pixel value when the accordion
      is initialized as open. This guarantees that the open-to-close animation is
      nice and smooth the first time they click it.
    */
    if (this.opened && this.$refs['accordion-content']) {
      this.maxHeight = "".concat(this.$refs['accordion-content'].clientHeight, "px");
    }
  },
  methods: {
    onClick: function onClick(event) {
      this.$emit('accordion-toggle', event);
    },
    onFocus: function onFocus() {
      this.focused = true;
    },
    onBlur: function onBlur() {
      this.focused = false;
    }
  },
  render: function render() {
    var h = arguments[0];
    return h("div", {
      "class": clsx(this.style[this.baseClass], this.modifierClass, this.styleClass, this.focusedClass),
      "attrs": {
        "id": "".concat(this.id, "-accordion")
      },
      "ref": "accordion-container"
    }, [h("button", {
      "class": this.style['cdr-accordion__button'],
      "attrs": {
        "id": this.id,
        "aria-expanded": "".concat(this.opened),
        "aria-controls": "".concat(this.id, "-collapsible")
      },
      "on": {
        "click": this.onClick,
        "focus": this.onFocus,
        "blur": this.onBlur
      }
    }, [h("span", {
      "class": this.style['cdr-accordion__label'],
      "attrs": {
        "id": "".concat(this.id, "-label")
      }
    }, [this.$slots.label || this.label]), h("icon-caret-down", {
      "class": clsx(this.style['cdr-accordion__icon'], this.isOpenClass),
      "attrs": {
        "size": this.compact ? 'small' : null
      }
    })]), h("div", {
      "class": clsx(this.style['cdr-accordion__content-container'], this.isOpenClass),
      "style": {
        maxHeight: this.maxHeight
      }
    }, [h("div", {
      "class": clsx(this.style['cdr-accordion__content'], this.isOpenClass),
      "attrs": {
        "aria-hidden": "".concat(!this.opened),
        "id": "".concat(this.id, "-collapsible")
      },
      "ref": "accordion-content"
    }, [this.$slots.default])])]);
  }
};

export default CdrAccordion;
