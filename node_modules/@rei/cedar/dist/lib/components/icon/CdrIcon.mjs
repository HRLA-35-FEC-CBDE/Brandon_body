import clsx from 'clsx';
import _mergeJSXProps from '@vue/babel-helper-vue-jsx-merge-props';
import size from '../../mixins/size.mjs';
import space from '../../mixins/space.mjs';
import style from './styles/CdrIcon.mjs';

var CdrIcon = {
  name: 'CdrIcon',
  mixins: [size, space],
  props: {
    /**
    * The href attribute passed to the use element. Will be prefixed with # automatically
    */
    use: String,

    /**
    * Sets icon fill to "inherit" so as to use parent/ancestor fill color.
    */
    inheritColor: Boolean
  },
  data: function data() {
    return {
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-icon';
    },
    inheritColorClass: function inheritColorClass() {
      return this.inheritColor ? this.style['cdr-icon--inherit-color'] : '';
    }
  },
  render: function render() {
    var h = arguments[0];
    var defaultDataObj = {
      attrs: {
        xmlns: 'http://www.w3.org/2000/svg',
        viewBox: '0 0 24 24',
        role: 'presentation'
      }
    };
    var slotDataObj = {};

    if (this.$slots.default) {
      var vNode = this.$slots.default[0];

      if (vNode.tag === 'svg') {
        // keep svg attrs/classes/on/etc to bind to our svg
        slotDataObj = vNode.data; // remove wrapping svg from slot but keep its contents

        this.$slots.default = vNode.children;
      }
    }

    return h("svg", _mergeJSXProps([{}, slotDataObj, {}, defaultDataObj, {
      "class": clsx(this.style[this.baseClass], this.sizeClass, this.inheritColorClass, this.space)
    }]), [this.$slots.default, this.use ? h("use", {
      "attrs": {
        "href": this.use,
        "xlink:href": this.use
      }
    }) : '']);
  }
};

export default CdrIcon;
