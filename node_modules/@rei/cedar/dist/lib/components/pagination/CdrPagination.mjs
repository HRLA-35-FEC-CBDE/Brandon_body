import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _everyInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/every';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import _indexOfInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import IconCaretLeft from '../icon/comps/caret-left.mjs';
import IconCaretRight from '../icon/comps/caret-right.mjs';
import CdrSelect from '../select/CdrSelect.mjs';
import style from './styles/CdrPagination.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context19; _forEachInstanceProperty(_context19 = ownKeys(Object(source), true)).call(_context19, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context20; _forEachInstanceProperty(_context20 = ownKeys(Object(source))).call(_context20, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrPagination = {
  name: 'CdrPagination',
  components: {
    IconCaretLeft: IconCaretLeft,
    IconCaretRight: IconCaretRight,
    CdrSelect: CdrSelect
  },
  model: {
    prop: 'value',
    event: 'update-pagination'
  },
  props: {
    /**
     * Total number of pages. Sometimes the total number of pages is different than total page data
     * and this prop allows for that.
     */
    totalPages: {
      type: Number,
      default: null
    },

    /**
     * Array of objects. Objects have structure of { page: Number, url: String }
     */
    pages: {
      type: Array,
      required: true,
      validator: function validator(value) {
        var result = _everyInstanceProperty(value).call(value, function (obj) {
          if (!Object.prototype.hasOwnProperty.call(obj, 'page') || typeof obj.page !== 'number') {
            console.error('Property "page" is missing or is not a number', obj); // eslint-disable-line

            return false;
          }

          if (!Object.prototype.hasOwnProperty.call(obj, 'url') || typeof obj.url !== 'string') {
            console.error('Property "url" is missing or is not a string', obj); // eslint-disable-line

            return false;
          }

          return true;
        });

        return result;
      }
    },

    /** @ignore used for binding v-model, represents the current page */
    value: {
      type: Number
    }
  },
  data: function data() {
    return {
      style: style,
      componentID: Math.random().toString(36).substr(2, 9),
      currentIdx: 0
    };
  },
  computed: {
    // track value internally (for use with select vmodel) and update external value when internal changes
    innerValue: {
      get: function get() {
        return this.value;
      },
      set: function set(newValue) {
        this.setCurrentIdx(newValue);
        this.$emit('update-pagination', newValue);
      }
    },
    currentUrl: function currentUrl() {
      return this.pages[this.currentIdx].url;
    },
    totalPageData: function totalPageData() {
      return this.pages.length;
    },
    prevPageIdx: function prevPageIdx() {
      return this.currentIdx - 1;
    },
    nextPageIdx: function nextPageIdx() {
      return this.currentIdx + 1;
    },

    /**
     * Creates an array of the pages that should be shown as links with logic for truncation.
     *
     * If total = 20 ([#] indicates current page)
     * [1] 2 3 4 5 ... 20
     * 1 2 3 [4] 5 ... 20
     * 1 ... 4 [5] 6 ... 20
     * 1 ... 15 [16] 17 ... 20
     * 1 ... 16 [17] 18 19 20
     *
     * If total 5 (or anything <= 7)
     * [1] 2 3 4 5
     * 1 2 [3] 4 5
     * 1 2 3 4 [5]
     *
     * Degrades for prev/next only scenario
     * urls = {"4": "url4", "5": "url5", "6": "url6"} (assuming current page is 5)
     * 4 [5] 6
     */
    paginationData: function paginationData() {
      var total = this.totalPageData;
      var current = this.innerValue;
      var delta = 1;
      var range = [];
      var over5 = true;
      var over5remain = true;

      if (total <= 7) {
        // all pages
        return this.pages;
      }

      if (current < 5) {
        var _context;

        // if first 5 pages
        over5 = false; // [2-5]

        range = _sliceInstanceProperty(_context = this.pages).call(_context, 1, 5);
      } else if (total - current < 4) {
        var _context2;

        // if last 5 pages
        over5remain = false;
        range = _sliceInstanceProperty(_context2 = this.pages).call(_context2, -5, -1);
      } else {
        // else in between
        for (var i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i += 1) {
          range.push(this.pages[i - 1]);
        }
      }

      if (current - delta > 2 && over5) {
        range.unshift('&hellip;');
      }

      if (current + delta < total - 1 && over5remain) {
        range.push('&hellip;');
      }

      range.unshift(this.pages[0]);
      range.push(this.pages[total - 1]);
      return range;
    },
    prevElAttrs: function prevElAttrs() {
      var _this = this;

      var prevPageData = this.pages[this.prevPageIdx];
      return {
        // things that we want to be able to easily bulk bind to scoped slot (for a11y, styling, etc.)
        attrs: {
          class: clsx(this.style['cdr-pagination__link'], this.style['cdr-pagination__prev']),
          'aria-label': 'Go to previous Page',
          ref: "prev-link-".concat(this.componentID)
        },
        // The rest of this is available for binding if needed by user (i.e. optional with vue-router)
        href: prevPageData === undefined ? null : prevPageData.url,
        page: prevPageData === undefined ? null : prevPageData.page,
        content: 'Prev',
        iconClass: this.style['cdr-pagination__caret--prev'],
        iconComponent: 'icon-caret-left',
        iconPath: '#caret-left',
        click: function click(e) {
          return _this.navigate(prevPageData.page, e);
        }
      };
    },
    prevEl: function prevEl() {
      var h = this.$createElement;
      return this.innerValue > this.pages[0].page ? h("li", [this.$scopedSlots.prevLink ? this.$scopedSlots.prevLink(this.prevElAttrs) : h("a", {
        "attrs": _objectSpread({}, this.prevElAttrs.attrs, {
          "href": this.prevElAttrs.href
        }),
        "ref": this.prevElAttrs.attrs.ref,
        "on": {
          "click": this.prevElAttrs.click
        }
      }, [h(this.prevElAttrs.iconComponent, {
        "class": this.prevElAttrs.iconClass
      }), this.prevElAttrs.content])]) : h("li", {
        "attrs": {
          "aria-hidden": "true"
        }
      }, [h("span", {
        "class": [this.prevElAttrs.attrs.class, clsx(this.style['cdr-pagination__link--disabled'])]
      }, [h(this.prevElAttrs.iconComponent, {
        "class": this.prevElAttrs.iconClass,
        "attrs": {
          "inherit-color": true
        }
      }), this.prevElAttrs.content])]);
    },
    nextElAttrs: function nextElAttrs() {
      var _this2 = this;

      var nextPageData = this.pages[this.nextPageIdx];
      return {
        // things that we want to be able to easily bulk bind to scoped slot (for a11y, styling, etc.)
        attrs: {
          class: clsx(this.style['cdr-pagination__link'], this.style['cdr-pagination__next']),
          'aria-label': 'Go to next page',
          ref: "next-link-".concat(this.componentID)
        },
        // The rest of this is available for binding if needed by user (i.e. optional with vue-router)
        href: nextPageData === undefined ? null : nextPageData.url,
        page: nextPageData === undefined ? null : nextPageData.page,
        content: 'Next',
        iconClass: this.style['cdr-pagination__caret--next'],
        iconComponent: 'icon-caret-right',
        iconPath: '#caret-right',
        click: function click(e) {
          return _this2.navigate(nextPageData.page, e);
        }
      };
    },
    nextEl: function nextEl() {
      var h = this.$createElement;
      return this.innerValue < this.pages[this.totalPageData - 1].page ? h("li", [this.$scopedSlots.nextLink ? this.$scopedSlots.nextLink(this.nextElAttrs) : h("a", {
        "attrs": _objectSpread({}, this.nextElAttrs.attrs, {
          "href": this.nextElAttrs.href
        }),
        "ref": this.nextElAttrs.attrs.ref,
        "on": {
          "click": this.nextElAttrs.click
        }
      }, [this.nextElAttrs.content, h(this.nextElAttrs.iconComponent, {
        "class": this.nextElAttrs.iconClass
      })])]) : h("li", {
        "attrs": {
          "aria-hidden": "true"
        }
      }, [h("span", {
        "class": [this.nextElAttrs.attrs.class, clsx(this.style['cdr-pagination__link--disabled'])]
      }, [this.nextElAttrs.content, h(this.nextElAttrs.iconComponent, {
        "class": this.nextElAttrs.iconClass,
        "attrs": {
          "inherit-color": true
        }
      })])]);
    },
    desktopEl: function desktopEl() {
      var _context3,
          _this3 = this;

      var h = this.$createElement;
      return _mapInstanceProperty(_context3 = this.paginationData).call(_context3, function (n) {
        var _context4;

        return h("li", {
          "key": _concatInstanceProperty(_context4 = "".concat(n, "-")).call(_context4, _this3.guid()),
          "class": _this3.style['cdr-pagination__li--links']
        }, [n === '&hellip;' && h("span", {
          "class": _this3.style['cdr-pagination__ellipse'],
          "domProps": {
            "innerHTML": n
          }
        }), n !== '&hellip;' && _this3.renderLinkEl(n)]);
      });
    },
    mobileEl: function mobileEl() {
      var _this4 = this,
          _context5;

      var h = this.$createElement;
      return h("li", {
        "class": this.style['cdr-pagination__li--select']
      }, [h("cdr-select", {
        "attrs": {
          "label": "Navigate to page",
          "hide-label": true,
          "id": "select-".concat(this.componentID)
        },
        "on": {
          "change": this.select
        },
        "ref": "select-".concat(this.componentID),
        "model": {
          value: _this4.innerValue,
          callback: function callback($$v) {
            _this4.innerValue = $$v;
          }
        }
      }, [_mapInstanceProperty(_context5 = this.paginationData).call(_context5, function (n) {
        var _context6;

        return n !== '&hellip;' && h("option", {
          "key": _concatInstanceProperty(_context6 = "".concat(n, "-")).call(_context6, _this4.guid()),
          "domProps": {
            "value": n.page
          }
        }, ["Page ", n.page, _this4.totalPages === null ? '' : " of ".concat(_this4.totalPages)]);
      })])]);
    }
  },
  watch: {
    pages: function pages() {
      this.setCurrentIdx(this.innerValue);
    }
  },
  beforeMount: function beforeMount() {
    this.setCurrentIdx(this.innerValue);
  },
  methods: {
    setCurrentIdx: function setCurrentIdx(page) {
      var _context7, _context8;

      this.currentIdx = _indexOfInstanceProperty(_context7 = _mapInstanceProperty(_context8 = this.pages).call(_context8, function (x) {
        return x.page;
      })).call(_context7, page);
    },
    navigate: function navigate(pageNum, e) {
      // Dont do anything if clicking the current active page
      if (pageNum === this.innerValue) {
        e.preventDefault();
        return;
      }

      this.innerValue = pageNum;
      this.$emit('navigate', pageNum, this.currentUrl, e);
      this.$nextTick(function () {
        // Done in a nextTick() to ensure rendering complete
        try {
          // Emulate native link click page reloading behaviour by blurring the
          // paginator and returning focus to the document
          var target = e.currentTarget || e.target;
          target.blur();
        } catch (err) {
          // eslint-disable-next-line no-console
          console.error(err);
        }
      });
    },
    select: function select(page, e) {
      e.preventDefault();

      if (this.$scopedSlots.link) {
        var _context9;

        var ref = this.$scopedSlots.link()[0].context.$refs[_concatInstanceProperty(_context9 = "page-link-".concat(page, "-")).call(_context9, this.componentID)]; // eslint-disable-line max-len


        if (ref.$el) {
          // it's a component (like vue-router)
          ref.$el.click();
        } else {
          // it's standard markup
          ref.click();
        }
      } else {
        var _context10;

        this.$refs[_concatInstanceProperty(_context10 = "page-link-".concat(page, "-")).call(_context10, this.componentID)].click();
      }
    },
    guid: function guid() {
      var _context11, _context12, _context13, _context14, _context15, _context16, _context17;

      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      }

      return _concatInstanceProperty(_context11 = _concatInstanceProperty(_context12 = _concatInstanceProperty(_context13 = _concatInstanceProperty(_context14 = _concatInstanceProperty(_context15 = _concatInstanceProperty(_context16 = _concatInstanceProperty(_context17 = "".concat(s4())).call(_context17, s4(), "-")).call(_context16, s4(), "-")).call(_context15, s4(), "-")).call(_context14, s4(), "-")).call(_context13, s4())).call(_context12, s4())).call(_context11, s4());
    },
    renderLinkEl: function renderLinkEl(n) {
      var _context18,
          _this5 = this;

      var h = this.$createElement;
      var linkData = {
        // things that we want to be able to easily bulk bind to scoped slot (for a11y, styling, etc.)
        attrs: {
          class: clsx(this.style['cdr-pagination__link'], {
            current: n.page === this.innerValue
          }),
          'aria-label': n.page === this.innerValue ? "Current page, page ".concat(n.page) : "Go to page ".concat(n.page),
          'aria-current': n.page === this.innerValue ? 'page' : null,
          ref: _concatInstanceProperty(_context18 = "page-link-".concat(n.page, "-")).call(_context18, this.componentID)
        },
        // The rest of this is available for binding if needed by user (i.e. optional with vue-router)
        href: n.url,
        click: function click(e) {
          return _this5.navigate(n.page, e);
        },
        page: n.page,
        content: n.page
      };
      return this.$scopedSlots.link ? this.$scopedSlots.link(linkData) : h("a", {
        "attrs": _objectSpread({}, linkData.attrs, {
          "href": linkData.href
        }),
        "on": {
          "click": linkData.click
        },
        "ref": linkData.attrs.ref
      }, [linkData.content]);
    }
  },
  render: function render() {
    var h = arguments[0];
    return h("nav", {
      "attrs": {
        "aria-label": "Pagination Navigation"
      }
    }, [h("ul", {
      "class": this.style['cdr-pagination']
    }, [this.prevEl, this.desktopEl, this.mobileEl, this.nextEl])]);
  }
};

export default CdrPagination;
