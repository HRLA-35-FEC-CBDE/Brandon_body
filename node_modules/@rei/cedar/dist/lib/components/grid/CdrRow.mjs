import clsx from 'clsx';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import propValidator from '../../utils/propValidator.mjs';
import modifier from '../../mixins/modifier.mjs';
import style from './styles/CdrRow.mjs';

var CdrRow = {
  name: 'CdrRow',
  mixins: [modifier],
  props: {
    /**
     * Number of equal-width columns in the row. A value of ‘auto’ will size columns as wide as their content.
     * Possible values: {1-12, auto}
     * Also accepts responsive values with `@breakpoint`: "2 4@md"
     */
    cols: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', 'auto']);
      }
    },

    /**
     * Justify columns within a row. See CSS flexbox justify-content.
     * Possible values: {left, center, right, around, between}.
     * Also accepts responsive values with `@breakpoint`: "center right@lg"
     */
    justify: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['left', 'center', 'right', 'around', 'between']);
      }
    },

    /**
     * Align columns of different heights. See CSS flexbox align-items.
     * Possible values: {top, middle, bottom, stretch}.
     * Also accepts responsive values with `@breakpoint`: "top middle@sm"
     */
    align: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['top', 'middle', 'bottom', 'stretch']);
      }
    },

    /**
     * Defines gutter size. Default gutter size is 16px @xs and @sm and 32px @md and @lg.
     * Possible values: {none, xxs}.
     * Also accepts responsive values with `@breakpoint`: "none@md"
     */
    gutter: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['none', 'xxs']);
      }
    },

    /**
     * Changes row to a column layout. See CSS flexbox flex-direction.
     * Possible values: {vertical}.
     * Also accepts responsive values with `@breakpoint`: "vertical@md"
     */
    vertical: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['vertical']);
      }
    },

    /**
     * Enables row wrapping. Only needs to be changed if overriding `nowrap`. See CSS flexbox flex-wrap.
     * Possible values: {wrap}.
     * Also accepts responsive values with `@breakpoint`: "wrap@md"
     */
    wrap: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['wrap']);
      }
    },

    /**
     * Disables row wrapping and enables overflow scrolling. See CSS flexbox flex-wrap.
     * Possible values: {nowrap}.
     * Also accepts responsive values with `@breakpoint`: "nowrap@md"
     */
    nowrap: {
      type: String,
      validator: function validator(value) {
        return propValidator(value, ['nowrap']);
      }
    },

    /**
     * Sets grid to use `ul` and `li` or `div`.
     * Possible values: {normal, list}.
     */
    type: {
      type: String,
      default: 'normal',
      validator: function validator(value) {
        return propValidator(value, ['normal', 'list'], false);
      }
    }
  },
  data: function data() {
    return {
      style: style
    };
  },
  provide: function provide() {
    return {
      rowType: this.type
    };
  },
  computed: {
    colsClass: function colsClass() {
      var _this = this;

      var classStr = [];

      if (this.cols) {
        var _context;

        _forEachInstanceProperty(_context = this.cols.split(' ')).call(_context, function (val) {
          classStr.push(_this.style["cdr-row_row".concat(val)]);
        });
      }

      return classStr.join(' ');
    },
    justifyClass: function justifyClass() {
      var _this2 = this;

      var classStr = [];

      if (this.justify) {
        var _context2;

        _forEachInstanceProperty(_context2 = this.justify.split(' ')).call(_context2, function (val) {
          classStr.push(_this2.modifyClassName('cdr-row', val));
        });
      }

      return classStr.join(' ');
    },
    alignClass: function alignClass() {
      var _this3 = this;

      var classStr = [];

      if (this.align) {
        var _context3;

        _forEachInstanceProperty(_context3 = this.align.split(' ')).call(_context3, function (val) {
          classStr.push(_this3.modifyClassName('cdr-row', val));
        });
      }

      return classStr.join(' ');
    },
    gutterClass: function gutterClass() {
      var _this4 = this;

      var classStr = [];

      if (this.gutter) {
        var _context4;

        _forEachInstanceProperty(_context4 = this.gutter.split(' ')).call(_context4, function (val) {
          classStr.push(_this4.style["cdr-row--gutter-".concat(val)]);
        });
      }

      return classStr.join(' ');
    },
    verticalClass: function verticalClass() {
      var _this5 = this;

      var classStr = [];

      if (this.vertical) {
        var _context5;

        _forEachInstanceProperty(_context5 = this.vertical.split(' ')).call(_context5, function (val) {
          classStr.push(_this5.modifyClassName('cdr-row', val));
        });
      }

      return classStr.join(' ');
    },
    wrapClass: function wrapClass() {
      var _this6 = this;

      var classStr = [];

      if (this.wrap) {
        var _context6;

        _forEachInstanceProperty(_context6 = this.wrap.split(' ')).call(_context6, function (val) {
          classStr.push(_this6.modifyClassName('cdr-row', val));
        });
      }

      return classStr.join(' ');
    },
    nowrapClass: function nowrapClass() {
      var _this7 = this;

      var classStr = [];

      if (this.nowrap) {
        var _context7;

        _forEachInstanceProperty(_context7 = this.nowrap.split(' ')).call(_context7, function (val) {
          classStr.push(_this7.modifyClassName('cdr-row', val));
        });
      }

      return classStr.join(' ');
    }
  },
  render: function render() {
    var h = arguments[0];
    var Component = this.type === 'list' ? 'ul' : 'div';
    return h(Component, {
      "class": clsx(this.style['cdr-row'], this.colsClass, this.justifyClass, this.alignClass, this.gutterClass, this.verticalClass, this.wrapClass, this.nowrapClass)
    }, [this.$slots.default]);
  }
};

export default CdrRow;
