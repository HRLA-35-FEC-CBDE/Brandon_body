import clsx from 'clsx';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import space from '../../mixins/space.mjs';
import modifier from '../../mixins/modifier.mjs';
import debounce from 'lodash-es/debounce';
import style from './styles/CdrDataTable.mjs';

/**
 * Cedar 2 compfor for data table
 * @author [REI Software Engineering](https://rei.github.io/rei-cedar/)
 */

var CdrDataTable = {
  name: 'CdrDataTable',
  mixins: [modifier, space],
  props: {
    id: {
      type: String,
      required: false
    },
    colHeaders: {
      type: [Array, Boolean],
      default: false
    },
    rowHeaders: {
      type: [Array, Boolean],
      default: false
    },
    rowData: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    keyOrder: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    caption: {
      type: String,
      required: false
    },
    constrainWidth: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      cols: 0,
      clientWidth: 0,
      scrollWidth: 0,
      hasColHeaders: false,
      hasRowHeaders: false,
      headerRowHeight: 0,
      rowHeights: null,
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-data-table';
    },
    lockedCol: function lockedCol() {
      return this.rowData.length > 0 && this.cols > 2 && this.hasRowHeaders;
    },
    isScrolling: function isScrolling() {
      return this.scrollWidth > this.clientWidth && this.lockedCol;
    },
    headerRowAlignHeight: function headerRowAlignHeight() {
      return this.headerRowHeight ? "".concat(this.headerRowHeight + 1, "px") : this.headerRowHeight;
      /* eslint-disable-line */
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.hasColHeaders = typeof this.colHeaders === 'boolean' ? this.colHeaders : this.colHeaders.length > 0;
    this.hasRowHeaders = typeof this.rowHeaders === 'boolean' ? this.rowHeaders : this.rowHeaders.length > 0;

    if (this.rowData.length > 0) {
      this.cols = this.$refs['row-0'].children.length;
    }

    if (this.lockedCol) {
      window.addEventListener('resize', debounce(function () {
        _this.rowHeights = null;

        _this.$nextTick(function () {
          _this.checkScroll();

          _this.setRowsContentHeight();
        });
      }, 250));
      this.$nextTick(function () {
        _this.checkScroll();

        _this.setRowsContentHeight();
      });
    }
  },
  methods: {
    checkScroll: function checkScroll() {
      var scrollContainer = this.$refs['scroll-container'];

      if (scrollContainer !== undefined) {
        this.clientWidth = scrollContainer.clientWidth;
        this.scrollWidth = scrollContainer.scrollWidth;
      }
    },
    getCellContent: function getCellContent(row, key) {
      return row[key] || '';
    },
    setRowsContentHeight: function setRowsContentHeight() {
      var rowContentHeights = [];
      var numRows = this.rowData.length;
      /* main table */

      for (var i = 0; i < numRows; i += 1) {
        var heights = {
          th: this.$refs["row-".concat(i)].children[0].offsetHeight || 1,
          td: this.$refs["row-".concat(i)].children[1].offsetHeight || 0
        };
        rowContentHeights.push(heights);
      }

      if (this.hasColHeaders) {
        this.headerRowHeight = this.$refs['row-col-headers'].children[1].offsetHeight;
      }

      this.rowHeights = rowContentHeights;
    },
    getRowAlignHeight: function getRowAlignHeight(elem, index) {
      // The idea here is only to return a height when it needs it, otherwise return null
      if (this.rowHeights === null) {
        return null;
      }

      var row = this.rowHeights[index];
      var alreadyAligned = row ? row.th - row.td === 1 : true;

      if (alreadyAligned) {
        return null;
      }

      var elemToChange = row.th > row.td ? 'td' : 'th';

      if (elem !== elemToChange) {
        return null;
      }

      return elemToChange === 'td' ? "".concat(row.th - 1, "px") : "".concat(row.td + 1, "px");
    }
  },
  render: function render() {
    var _context,
        _context2,
        _this2 = this;

    var h = arguments[0];
    return h("div", {
      "class": clsx(this.style[this.baseClass], this.modifierClass, this.space)
    }, [this.caption && h("span", {
      "class": this.style['cdr-data-table__caption'],
      "attrs": {
        "aria-hidden": "true"
      }
    }, [this.caption]), h("div", {
      "class": clsx(this.style['cdr-data-table__scroll-container'], {
        'locked-col': this.lockedCol
      }, {
        'is-scrolling': this.isScrolling
      }),
      "ref": "scroll-container"
    }, [h("table", {
      "class": clsx(this.style['cdr-data-table__content'], {
        'constrain-width': this.constrainWidth
      }),
      "attrs": {
        "id": this.id ? this.id : null
      }
    }, [this.caption && h("caption", {
      "class": this.style['cdr-data-table__caption-sr']
    }, [this.caption]), this.hasColHeaders && h("thead", [this.$slots.thead || h("tr", {
      "ref": "row-col-headers"
    }, [h("th", {
      "class": "empty",
      "directives": [{
        name: "show",
        value: this.hasRowHeaders
      }],
      "attrs": {
        "scope": "col"
      },
      "style": {
        height: this.headerRowAlignHeight
      }
    }), _mapInstanceProperty(_context = this.colHeaders).call(_context, function (header, index) {
      return h("th", {
        "key": "header-row-col-".concat(index),
        "attrs": {
          "scope": "col"
        }
      }, [header]);
    })])]), h("tbody", {
      "ref": "table-body"
    }, [this.$slots.tbody || _mapInstanceProperty(_context2 = this.rowData).call(_context2, function (row, rowIndex) {
      var _context3;

      return h("tr", {
        "key": "row-".concat(rowIndex),
        "ref": "row-".concat(rowIndex)
      }, [_this2.hasRowHeaders && h("th", {
        "attrs": {
          "scope": "row"
        },
        "ref": "row-".concat(rowIndex, "-th"),
        "class": _this2.style['align-row-header-content'],
        "style": {
          height: _this2.getRowAlignHeight('th', rowIndex)
        }
      }, [_this2.rowHeaders[rowIndex]]), _mapInstanceProperty(_context3 = _this2.keyOrder).call(_context3, function (key, index) {
        var _context4;

        return h("td", {
          "key": _concatInstanceProperty(_context4 = "td-".concat(index, "-")).call(_context4, key),
          "style": {
            height: _this2.getRowAlignHeight('td', rowIndex)
          }
        }, [_this2.getCellContent(row, key)]);
      })]);
    })])])])]);
  }
};

export default CdrDataTable;
