import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import size from '../../mixins/size.mjs';
import _indexOfInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/index-of';
import CdrButton from '../button/CdrButton.mjs';
import IconXLg from '../icon/comps/x-lg.mjs';
import _bindInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/bind';
import _setTimeout from '@babel/runtime-corejs3/core-js-stable/set-timeout';
import tabbable from 'tabbable';
import style from './styles/CdrModal.mjs';
import onTransitionEnd from './onTransitionEnd.mjs';
import CdrText from '../text/CdrText.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context4; _forEachInstanceProperty(_context4 = ownKeys(Object(source), true)).call(_context4, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context5; _forEachInstanceProperty(_context5 = ownKeys(Object(source))).call(_context5, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrModal = {
  name: 'CdrModal',
  components: {
    CdrButton: CdrButton,
    IconXLg: IconXLg,
    CdrText: CdrText
  },
  mixins: [size],
  props: {
    opened: {
      type: Boolean,
      required: true
    },
    label: {
      type: String,
      required: true
    },
    showTitle: {
      type: Boolean,
      required: false,
      default: true
    },
    ariaDescribedbBy: {
      type: String,
      required: false,
      default: null
    },
    id: {
      type: String,
      required: false,
      default: null
    },
    overlayClass: String,
    wrapperClass: String,
    contentClass: String,
    animationDuration: {
      type: Number,
      default: 300
    }
  },
  data: function data() {
    return {
      style: style,
      unsubscribe: null,
      keyHandler: null,
      lastActive: null,
      focusHandler: null,
      reallyClosed: !this.opened,
      offset: null
    };
  },
  computed: {
    dialogAttrs: function dialogAttrs() {
      return {
        'aria-describedby': this.ariaDescribedBy,
        'aria-modal': 'true',
        id: this.id
      };
    },
    dialogClass: function dialogClass() {
      var _context;

      return _concatInstanceProperty(_context = "".concat(this.style['cdr-modal__dialog'], " ")).call(_context, this.size);
    }
  },
  watch: {
    opened: function opened(newValue, oldValue) {
      if (!!newValue === !!oldValue) return;

      if (newValue) {
        this.handleOpened();
      } else {
        this.handleClosed();
      }
    }
  },
  mounted: function mounted() {
    if (this.opened) {
      this.addNoScroll();
      this.addHandlers();
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (this.unsubscribe) this.unsubscribe();
    if (this.opened) this.removeNoScroll();
    document.removeEventListener('focusin', this.focusHandler, true);
    document.removeEventListener('keydown', this.keyHandler);
  },
  methods: {
    handleKeyDown: function handleKeyDown(_ref) {
      var key = _ref.key;

      switch (key) {
        case 'Escape':
        case 'Esc':
          this.onClick();
          break;
      }
    },
    handleFocus: function handleFocus(e) {
      var _document = document,
          documentElement = _document.documentElement;
      if (this.$refs.modal.contains(e.target) || !documentElement) return;
      var tabbables = tabbable(documentElement);
      var these = tabbable(this.$refs.modal);

      var nextIx = _indexOfInstanceProperty(tabbables).call(tabbables, e.target);

      var firstModalIx = _indexOfInstanceProperty(tabbables).call(tabbables, these[0]);

      var nextRef = nextIx < firstModalIx ? these[these.length - 1] : these[0];
      if (nextRef) nextRef.focus();
      documentElement.scrollTop = this.scrollTop;
      documentElement.scrollLeft = this.scrollLeft;
    },
    handleOpened: function handleOpened() {
      var _this = this;

      var _document2 = document,
          activeElement = _document2.activeElement;
      this.addNoScroll();
      this.reallyClosed = false;
      this.lastActive = activeElement;
      this.$nextTick(function () {
        _this.$refs.modal.focus();

        _this.addHandlers();

        _setTimeout(function () {
          // for some reason Safari scrolls the wrapper down a bit?
          // doesn't work without setTimeout for some unknown reason
          _this.$refs.wrapper.scrollTop = 0;
        });
      });
    },
    handleClosed: function handleClosed() {
      var _this2 = this;

      document.removeEventListener('keydown', this.keyHandler);
      this.unsubscribe = onTransitionEnd(this.$refs.wrapper, function () {
        _this2.unsubscribe();

        _this2.removeNoScroll();

        _this2.unsubscribe = null;
        _this2.reallyClosed = true; // restore previous scroll position

        window.scrollTo(_this2.offset.x, _this2.offset.y);
        document.removeEventListener('focusin', _this2.focusHandler, true);
        if (_this2.lastActive) _this2.lastActive.focus();
      }, this.animationDuration + 16);
    },
    addNoScroll: function addNoScroll() {
      var _document3 = document,
          documentElement = _document3.documentElement,
          body = _document3.body;
      var offset = {
        x: window.scrollX || (documentElement || {}).scrollLeft || (body || {}).scrollLeft || 0,
        y: window.scrollY || (documentElement || {}).scrollTop || (body || {}).scrollTop || 0
      };
      this.offset = offset;

      if (documentElement) {
        documentElement.classList.add(style['cdr-modal__noscroll']); // keep current scroll position manually

        documentElement.style.top = "-".concat(offset.y, "px");
        documentElement.style.left = "-".concat(offset.x, "px");
      }

      if (body) {
        body.classList.add(style['cdr-modal__noscroll']);
      }
    },
    removeNoScroll: function removeNoScroll() {
      var _document4 = document,
          documentElement = _document4.documentElement,
          body = _document4.body;

      if (body) {
        body.classList.remove(style['cdr-modal__noscroll']);
      }

      if (documentElement) {
        documentElement.classList.remove(style['cdr-modal__noscroll']);
        documentElement.style.top = '';
        documentElement.style.left = '';
      }
    },
    addHandlers: function addHandlers() {
      var _context2, _context3;

      this.focusHandler = _bindInstanceProperty(_context2 = this.handleFocus).call(_context2, this);
      this.keyHandler = _bindInstanceProperty(_context3 = this.handleKeyDown).call(_context3, this);
      document.addEventListener('focusin', this.focusHandler, true);
      document.addEventListener('keydown', this.keyHandler);
    },
    onClick: function onClick(e) {
      this.$emit('closed', e);
    }
  },
  render: function render() {
    var h = arguments[0];
    var onClick = this.onClick,
        modalId = this.modalId,
        opened = this.opened,
        label = this.label,
        wrapperClass = this.wrapperClass,
        overlayClass = this.overlayClass,
        dialogClass = this.dialogClass,
        contentClass = this.contentClass,
        reallyClosed = this.reallyClosed,
        defaultSlot = this.$slots.default;
    return h("div", {
      "class": clsx(this.style['cdr-modal'], _defineProperty({}, this.style.closed, !opened)),
      "ref": "wrapper",
      "attrs": {
        "role": "presentation"
      }
    }, [h("div", {
      "class": clsx(this.style['cdr-modal__outerWrap'], wrapperClass)
    }, [h("div", {
      "attrs": {
        "aria-hidden": "true"
      },
      "on": {
        "click": onClick
      },
      "class": clsx(this.style['cdr-modal__overlay'], overlayClass)
    }), h("div", {
      "attrs": {
        "tabIndex": opened ? '0' : undefined
      }
    }), h("div", {
      "ref": "modal",
      "class": clsx(this.style['cdr-modal__contentWrap'], dialogClass),
      "attrs": _objectSpread({
        "id": modalId,
        "tabIndex": "-1",
        "role": "dialog",
        "aria-modal": !!opened,
        "aria-label": label
      }, this.dialogAttrs || {})
    }, [h("div", {
      "class": clsx(this.style['cdr-modal__innerWrap'], contentClass),
      "style": reallyClosed ? {
        display: 'none'
      } : undefined
    }, [h("section", [h("div", {
      "class": this.style['cdr-modal__content']
    }, [h("div", {
      "class": this.style['cdr-modal__header']
    }, [h("div", {
      "class": this.style['cdr-modal__title']
    }, [this.showTitle && this.$slots.title, this.showTitle && !this.$slots.title && h("cdr-text", {
      "attrs": {
        "tag": "h1",
        "modifier": "heading-serif-600"
      }
    }, [this.label])]), h("cdr-button", {
      "attrs": {
        "id": "close-modal-button",
        "icon-only": true,
        "aria-label": "close"
      },
      "class": this.style['cdr-modal__close-button'],
      "on": {
        "click": onClick
      }
    }, [h(IconXLg, {
      "slot": "icon",
      "class": this.style['cdr-button__icon'],
      "attrs": {
        "inherit-color": true
      }
    })])]), h("div", {
      "attrs": {
        "role": "document",
        "tabindex": "0"
      },
      "class": this.style['cdr-modal__text']
    }, [h("div", {
      "class": this.style['cdr-modal__text-content']
    }, [defaultSlot]), h("div", {
      "class": this.style['cdr-modal__text-fade']
    })])])])])]), h("div", {
      "attrs": {
        "tabIndex": opened ? '0' : undefined
      }
    })])]);
  }
};

export default CdrModal;
