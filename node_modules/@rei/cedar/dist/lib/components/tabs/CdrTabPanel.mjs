import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import modifier from '../../mixins/modifier.mjs';
import style from './styles/CdrTabPanel.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrTabPanel = {
  name: 'CdrTabPanel',
  mixins: [modifier],
  props: {
    /**
     * Required string value that shows up on tab header
     */
    name: {
      type: String,
      required: true
    },

    /**
     * Optional extra reference value to be set on the tab, otherwise
     * the tab name will be used for reference.
     */
    id: String
  },
  data: function data() {
    return {
      active: false,
      offsetX: 0,
      tabId: this.id || this.name,
      animationDirection: 'default',
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-tab-panel';
    },
    animationHooks: function animationHooks() {
      return _objectSpread({
        beforeEnter: this.setEnterStart,
        afterEnter: this.setEnterEnd,
        beforeLeave: this.setLeaveStart,
        afterLeave: this.setLeaveEnd
      }, this.$listeners);
    }
  },
  methods: {
    setActive: function setActive(state) {
      this.active = state;
      this.$emit('tab-change', state, this.tabId);
      this.$emit('tabChange', state, this.tabId);
    },
    setAnimationDirection: function setAnimationDirection(direction) {
      this.animationDirection = direction;
    },
    setOffsetX: function setOffsetX(x) {
      this.offsetX = x;
    },
    setEnterStart: function setEnterStart(element) {
      var el = element;
      el.style.animationDirection = 'reverse';
      el.style.animationTimingFunction = 'cubic-bezier(0.4, 0, 0.68, .06)';
      el.classList.add(this.style[this.animationDirection]);
    },
    setEnterEnd: function setEnterEnd(element) {
      var el = element;
      el.style.animationDirection = '';
      el.classList.remove(this.style[this.animationDirection]);
    },
    setLeaveStart: function setLeaveStart(element) {
      var el = element;
      el.classList.add(this.style[this.animationDirection]);
      el.style.animationTimingFunction = 'cubic-bezier(0.32, 0.94, 0.6, 1)';
    },
    setLeaveEnd: function setLeaveEnd(element) {
      var el = element;
      el.classList.remove(this.style[this.animationDirection]);
    },
    handleUpArrowNav: function handleUpArrowNav() {
      this.$parent.setFocusToActiveTabHeader();
    }
  },
  render: function render() {
    var _this = this;

    var h = arguments[0];
    return h("transition", {
      "attrs": {
        "name": "fly"
      },
      "on": _objectSpread({}, this.animationHooks)
    }, [h("div", {
      "directives": [{
        name: "show",
        value: this.active
      }],
      "attrs": {
        "aria-hidden": !this.active,
        "id": this.tabId,
        "tabindex": "0",
        "role": "tabpanel"
      },
      "class": clsx(this.style[this.baseClass], this.modifierClass),
      "ref": "cdrTabPanelContainer",
      "key": this.name,
      "on": {
        "keydown": function keydown($event) {
          if (!("button" in $event) && _this._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) return null;
          $event.preventDefault();
          return _this.handleUpArrowNav($event);
        }
      }
    }, [this.$slots.default])]);
  }
};

export default CdrTabPanel;
