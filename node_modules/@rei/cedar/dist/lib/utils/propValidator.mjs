import _someInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/some';
import _everyInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/every';

/**
 * Validates space separated string against an array of accepted values.
 * @param {String} propValue -- Space separated string (provided by the user)
 * @param {Array} validArr -- Array of values that are considered "valid"
 * @param {Boolean} responsive -- Enables validation of validArr values with '@sm', '@md', '@lg' added to them
 */
function validateProp(propValue, validArr) {
  var responsive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var strArr = propValue.split(' ');
  return _everyInstanceProperty(strArr).call(strArr, function (mod) {
    var modValid = _someInstanceProperty(validArr).call(validArr, function (validStr) {
      if (responsive) {
        return mod === validStr || mod === "".concat(validStr, "@xs") || mod === "".concat(validStr, "@sm") || mod === "".concat(validStr, "@md") || mod === "".concat(validStr, "@lg");
      }

      return mod === validStr;
    });

    if (!modValid) {
      console.error("Invalid prop value: ".concat(mod)); // eslint-disable-line no-console
    }

    return modValid;
  });
}

export default validateProp;
