import clsx from 'clsx';
import _mapInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/map';
import modifier from '../../mixins/modifier.mjs';
import _typeof from '@babel/runtime-corejs3/helpers/esm/typeof';
import style from './styles/CdrBreadcrumb.mjs';

var CdrBreadcrumb = {
  name: 'CdrBreadcrumb',
  mixins: [modifier],
  props: {
    /**
     * Required. List of source breadcrumb property objects
     *
     * {
     *   displayText: Breadcrumb Display Text
     *   url: location breadcrumb should navigate on click
     * }
     */
    items: {
      type: Array,
      default: function _default() {
        return [];
      },
      validator: function validator(value) {
        if (value.length && value.length > 0) {
          for (var i = 0; i < value.length; i += 1) {
            if (!(_typeof(value[i].item) === 'object')) {
              console.error('Breadcrumb items array missing item key at index ', i); // eslint-disable-line no-console

              return false;
            }

            if (!Object.hasOwnProperty.call(value[i].item, 'name')) {
              console.error('Breadcrumb items array is missing item.name value at index ', i); // eslint-disable-line no-console

              return false;
            }
          }
        }

        return true;
      }
    },

    /**
     * Flag to track container width threshold exceeded
     */
    truncationEnabled: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      truncate: this.truncationEnabled && this.items.length > 2,
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-breadcrumb';
    },
    ellipsis: function ellipsis() {
      var h = this.$createElement;
      return this.truncate ? h("li", {
        "on": {
          "click": this.handleEllipsisClick
        },
        "class": this.style['cdr-breadcrumb__item'],
        "ref": "ellipse"
      }, [h("button", {
        "attrs": {
          "aria-expanded": "false",
          "aria-label": "ellipsis"
        },
        "class": this.style['cdr-breadcrumb__ellipses']
      }, [h("svg", {
        "class": this.style['cdr-breadcrumb__ellipses-icon'],
        "attrs": {
          "xmlns": "http://www.w3.org/2000/svg",
          "viewBox": "0 0 24 24"
        }
      }, [h("title", ["ellipsis"]), h("path", {
        "attrs": {
          "d": "M17.5 22a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM12 22a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm-5.5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"
        }
      })])]), h("span", {
        "class": this.style['cdr-breadcrumb__delimiter'],
        "attrs": {
          "aria-hidden": "true"
        }
      }, ["/"])]) : '';
    },
    listItems: function listItems() {
      var _context,
          _this = this;

      var h = this.$createElement;
      return _mapInstanceProperty(_context = this.items).call(_context, function (breadcrumb, index) {
        var delimiter = index < _this.items.length - 1 ? h("span", {
          "class": _this.style['cdr-breadcrumb__delimiter'],
          "attrs": {
            "aria-hidden": "true"
          }
        }, ["/"]) : '';
        var ref = index === 0 ? 'firstBreadcrumb' : null;
        return h("li", {
          "class": _this.style['cdr-breadcrumb__item'],
          "key": breadcrumb.item.id || breadcrumb.item.name.replace(/ /g, '-').toLowerCase(),
          "directives": [{
            name: "show",
            value: !_this.truncate || index >= _this.items.length - 2
          }]
        }, [_this.$scopedSlots.link ? _this.$scopedSlots.link({
          class: _this.style['cdr-breadcrumb__link'],
          href: breadcrumb.item.url,
          content: breadcrumb.item.name,
          ref: ref
        }) : h("a", {
          "class": _this.style['cdr-breadcrumb__link'],
          "ref": ref,
          "attrs": {
            "href": breadcrumb.item.url
          }
        }, [breadcrumb.item.name]), delimiter]);
      });
    }
  },
  watch: {
    items: function items() {
      this.truncate = this.truncationEnabled && this.items.length > 2;
    }
  },
  methods: {
    handleEllipsisClick: function handleEllipsisClick() {
      var _this2 = this;

      this.truncate = false;
      this.$nextTick(function () {
        _this2.$refs.firstBreadcrumb.focus();
      });
    }
  },
  render: function render() {
    var h = arguments[0];
    return h("nav", {
      "ref": "container",
      "class": clsx(this.style[this.baseClass], this.modifierClass),
      "attrs": {
        "aria-label": "Breadcrumb"
      }
    }, [h("ol", {
      "ref": "cdrBreadcrumbList",
      "class": this.style['cdr-breadcrumb__list']
    }, [this.ellipsis, this.listItems])]);
  }
};

export default CdrBreadcrumb;
