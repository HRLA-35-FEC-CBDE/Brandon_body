import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import space from '../../mixins/space.mjs';
import modifier from '../../mixins/modifier.mjs';
import style from './styles/CdrLink.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrLink = {
  name: 'CdrLink',
  mixins: [modifier, space],
  props: {
    tag: {
      type: String,
      default: 'a'
    },
    href: {
      type: String,
      default: '#'
    },

    /** @ignore */
    target: String,

    /** @ignore */
    rel: String
  },
  data: function data() {
    return {
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-link';
    },
    computedRel: function computedRel() {
      if (this.target === '_blank') {
        return this.rel || 'noopener noreferrer';
      }

      return this.rel;
    }
  },
  render: function render() {
    var h = arguments[0];
    var Component = this.tag;
    return h(Component, {
      "class": clsx(this.style[this.baseClass], this.modifierClass, this.space),
      "attrs": {
        "target": this.target,
        "rel": this.computedRel,
        "href": this.tag === 'a' ? this.href : null
      },
      "on": _objectSpread({}, this.$listeners)
    }, [this.$slots.default]);
  }
};

export default CdrLink;
