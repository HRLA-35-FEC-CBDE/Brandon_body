import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _mergeJSXProps from '@vue/babel-helper-vue-jsx-merge-props';
import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import size from '../../mixins/size.mjs';
import space from '../../mixins/space.mjs';
import modifier from '../../mixins/modifier.mjs';
import _sliceInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/slice';
import _Array$isArray from '@babel/runtime-corejs3/core-js-stable/array/is-array';
import _Symbol from '@babel/runtime-corejs3/core-js-stable/symbol';
import style from './styles/CdrCheckbox.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source), true)).call(_context2, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context3; _forEachInstanceProperty(_context3 = ownKeys(Object(source))).call(_context3, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
var CdrCheckbox = {
  name: 'CdrCheckbox',
  mixins: [modifier, space, size],
  inheritAttrs: false,
  props: {
    /**
     * Class that is added to the label for custom styles
     */
    labelClass: String,

    /**
     * Class that is added to the input for custom styles
     */
    inputClass: String,

    /**
     * Class that is added to the slot wrapper for custom styles
     */
    contentClass: String,

    /**
     * Show checkbox in indeterminate state. (NOTE: this is a visual-only state and there is no logic for when to show it)
    */
    indeterminate: {
      type: Boolean,
      default: false
    },

    /**
     * The value when checked.
    */
    trueValue: {
      type: [String, Number, Boolean, Object, Array, _Symbol, Function],
      default: true
    },

    /**
     * The value when unchecked.
    */
    falseValue: {
      type: [String, Number, Boolean, Object, Array, _Symbol, Function],
      default: false
    },

    /**
     * The value when used in a checkbox group. Replaces `trueValue` and `falseValue`.
    */
    customValue: [String, Number, Boolean, Object, Array, _Symbol, Function],

    /** @ignore */
    value: {
      type: [String, Number, Boolean, Object, Array, _Symbol, Function]
    }
  },
  data: function data() {
    return {
      newValue: this.value,
      style: style
    };
  },
  computed: {
    baseClass: function baseClass() {
      return 'cdr-checkbox';
    }
  },
  watch: {
    value: function value(val) {
      this.newValue = val;
    },
    newValue: function newValue(val) {
      /**
       * `v-model` value. Fires on check/uncheck.
       * @event input
       * @type value | event
       * */
      this.$emit('input', val);
    }
  },
  methods: {
    updateValue: function updateValue(newValue, e) {
      this.$emit('change', newValue, e);
    }
  },
  // TODO: pass disabled/checked/other attrs through? need direct binding?
  render: function render() {
    var _this = this;

    var h = arguments[0];
    return h("div", {
      "class": clsx(this.space, this.style['cdr-checkbox__wrap'])
    }, [h("label", {
      "class": clsx(this.style[this.baseClass], this.modifierClass, this.labelClass, this.sizeClass),
      "ref": "label"
    }, [h("input", _mergeJSXProps([{
      "on": {
        "change": [function ($event) {
          var $$a = _this.newValue,
              $$el = $event.target,
              $$c = $$el.checked ? _this.customValue ? null : _this.trueValue : _this.customValue ? null : _this.falseValue;

          if (_Array$isArray($$a)) {
            var $$v = _this.customValue,
                $$i = _this._i($$a, $$v);

            if ($$el.checked) {
              $$i < 0 && (_this.newValue = _concatInstanceProperty($$a).call($$a, [$$v]));
            } else {
              var _context;

              $$i > -1 && (_this.newValue = _concatInstanceProperty(_context = _sliceInstanceProperty($$a).call($$a, 0, $$i)).call(_context, _sliceInstanceProperty($$a).call($$a, $$i + 1)));
            }
          } else {
            _this.newValue = $$c;
          }
        }, function (e) {
          return _this.updateValue(_this.newValue, e);
        }]
      },
      "class": clsx(this.style['cdr-checkbox__input'], this.inputClass),
      "attrs": _objectSpread({
        "type": "checkbox"
      }, this.$attrs, {
        "indeterminate": this.indeterminate
      }),
      "ref": "checkbox",
      "domProps": {
        "checked": _Array$isArray(_this.newValue) ? this._i(_this.newValue, _this.customValue) > -1 : this._q(_this.newValue, _this.customValue ? null : _this.trueValue)
      }
    }, {
      directives: [{
        name: "model",
        value: _this.newValue,
        modifiers: {}
      }]
    }])), h("span", {
      "class": this.style['cdr-checkbox__figure']
    }), h("div", {
      "class": clsx(this.style['cdr-checkbox__content'], this.contentClass)
    }, [this.$slots.default])])]);
  }
};

export default CdrCheckbox;
