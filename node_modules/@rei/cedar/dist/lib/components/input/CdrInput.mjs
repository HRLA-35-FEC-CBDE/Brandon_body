import clsx from 'clsx';
import _Object$defineProperty from '@babel/runtime-corejs3/core-js-stable/object/define-property';
import _Object$defineProperties from '@babel/runtime-corejs3/core-js-stable/object/define-properties';
import _Object$getOwnPropertyDescriptors from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors';
import _forEachInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/for-each';
import _Object$getOwnPropertyDescriptor from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor';
import _filterInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/filter';
import _Object$getOwnPropertySymbols from '@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols';
import _Object$keys from '@babel/runtime-corejs3/core-js-stable/object/keys';
import _defineProperty from '@babel/runtime-corejs3/helpers/esm/defineProperty';
import _mergeJSXProps from '@vue/babel-helper-vue-jsx-merge-props';
import propValidator from '../../utils/propValidator.mjs';
import size from '../../mixins/size.mjs';
import space from '../../mixins/space.mjs';
import _Object$assign from '@babel/runtime-corejs3/core-js-stable/object/assign';
import style from './styles/CdrInput.mjs';

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context; _forEachInstanceProperty(_context = ownKeys(Object(source), true)).call(_context, function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { var _context2; _forEachInstanceProperty(_context2 = ownKeys(Object(source))).call(_context2, function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Cedar 2 component for input
 * **NOTE:** `v-model` is required.
 * @version 1.0.0
 * @author [REI Software Engineering](https://rei.github.io/rei-cedar/)
 */

var CdrInput = {
  name: 'CdrInput',
  mixins: [size, space],
  inheritAttrs: false,
  props: {
    /**
     * `id` for the input that is mapped to the label `for` attribute. If one is not provided, it will be auto generated.
    */
    id: String,

    /**
     *  'type' attribute for the input as defined by w3c.  Only supporting text|email|number|password|search|url.
     *  The increment/decrement webkit psuedo element is hidden for number.
     *  See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input for more details.
    */
    type: {
      type: [String],
      default: 'text',
      validator: function validator(value) {
        return propValidator(value, ['text', 'email', 'number', 'password', 'search', 'url']);
      }
    },

    /**
     * Label text. This is required for a11y even if hiding the label with `hideLabel`.
    */
    label: {
      type: String,
      required: true
    },

    /**
     * Removes the label element but sets the input `aria-label` to `label` text for a11y.
    */
    hideLabel: Boolean,

    /**
     * Number of rows for input.  Converts component to text-area if rows greater than 1.
    */
    rows: Number,

    /** @ignore */
    disabled: Boolean,

    /** @ignore */
    required: Boolean,

    /** @ignore */
    value: {
      type: [String, Number]
    }
  },
  data: function data() {
    return {
      style: style
    };
  },
  computed: {
    // Use given id or generate one
    inputId: function inputId() {
      return this.id ? this.id : this._uid; // eslint-disable-line no-underscore-dangle
    },
    baseClass: function baseClass() {
      return 'cdr-input';
    },
    labelClass: function labelClass() {
      var _ref;

      return _ref = {}, _defineProperty(_ref, this.style['cdr-input__label'], true), _defineProperty(_ref, this.style['cdr-input__label--disabled'], this.disabled), _ref;
    },
    inputClass: function inputClass() {
      var _ref2;

      return _ref2 = {}, _defineProperty(_ref2, this.style['cdr-input'], true), _defineProperty(_ref2, this.style['cdr-input--multiline'], this.rows > 1), _defineProperty(_ref2, this.style['cdr-input--preicon'], this.$slots['pre-icon']), _ref2;
    },
    inputWrapClass: function inputWrapClass() {
      return _defineProperty({}, this.style['cdr-input-wrap'], true);
    },
    inputListeners: function inputListeners() {
      // https://vuejs.org/v2/guide/components-custom-events.html#Binding-Native-Events-to-Components
      // handles conflict between v-model and v-on="$listeners"
      var vm = this;
      return _Object$assign({}, this.$listeners, {
        input: function input(event) {
          vm.$emit('input', event.target.value);
        }
      });
    },
    labelEl: function labelEl() {
      var h = this.$createElement;
      var requiredEl = this.required ? h("span", {
        "class": this.style['cdr-input__required-label']
      }, ["Required"]) : '';
      return !this.hideLabel ? h("label", {
        "class": this.labelClass,
        "attrs": {
          "for": this.inputId
        },
        "ref": "label"
      }, [this.label, requiredEl]) : '';
    },
    inputEl: function inputEl() {
      var _this = this;

      var h = this.$createElement;

      if (this.rows && this.rows > 1) {
        return h("textarea", _mergeJSXProps([{
          "on": _objectSpread({
            "input": function input($event) {
              if ($event.target.composing) return;
              _this.value = $event.target.value;
            }
          }, this.inputListeners),
          "attrs": _objectSpread({
            "rows": this.rows,
            "id": this.inputId,
            "disabled": this.disabled,
            "required": this.required,
            "aria-label": this.hideLabel ? this.label : null
          }, this.$attrs),
          "class": clsx(this.inputClass, this.sizeClass, this.space),
          "ref": "input",
          "domProps": {
            "value": _this.value
          }
        }, {
          directives: [{
            name: "model",
            value: _this.value,
            modifiers: {}
          }]
        }]));
      }

      return h("input", _mergeJSXProps([{
        "on": _objectSpread({
          "input": function input($event) {
            if ($event.target.composing) return;
            _this.value = $event.target.value;
          }
        }, this.inputListeners),
        "attrs": _objectSpread({
          "type": this.type,
          "id": this.inputId,
          "disabled": this.disabled,
          "required": this.required,
          "aria-label": this.hideLabel ? this.label : null
        }, this.$attrs),
        "class": clsx(this.inputClass, this.sizeClass, this.space),
        "ref": "input",
        "domProps": {
          "value": _this.value
        }
      }, {
        directives: [{
          name: "model",
          value: _this.value,
          modifiers: {}
        }]
      }]));
    }
  },
  render: function render() {
    var h = arguments[0];
    return h("div", {
      "class": this.style['cdr-input-container']
    }, [this.labelEl, this.$slots.info && h("span", {
      "class": this.style['cdr-input__info-container']
    }, [this.$slots.info]), h("div", {
      "class": this.inputWrapClass
    }, [this.inputEl, this.$slots['pre-icon'] && h("span", {
      "class": this.style['cdr-input__pre-icon']
    }, [this.$slots['pre-icon']]), this.$slots['post-icon'] && h("span", {
      "class": this.style['cdr-input__post-icon']
    }, [this.$slots['post-icon']])]), this.$slots['helper-text'] && h("span", {
      "class": this.style['cdr-input__helper-text']
    }, [this.$slots['helper-text']])]);
  }
};

export default CdrInput;
